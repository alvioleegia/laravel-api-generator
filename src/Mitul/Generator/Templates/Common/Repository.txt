<?php

namespace $NAMESPACE$;

use $MODEL_NAMESPACE$;
use Illuminate\Support\Facades\Schema;
use Bosnadev\Repositories\Contracts\RepositoryInterface;
use Bosnadev\Repositories\Eloquent\Repository;

class $MODEL_NAME$Repository extends Repository
{

    /**
    * Configure the Model
    *
    **/
    public function model()
    {
      return '$MODEL_NAMESPACE$';
    }

	public function search($input)
    {
        $query = $MODEL_NAME$::query();

        $columns = Schema::getColumnListing('$TABLE_NAME$');
        $attributes = array();

        foreach($columns as $attribute)
        {
            if(isset($input[$attribute]) and !empty($input[$attribute]))
            {
                $query->where($attribute, $input[$attribute]);
                $attributes[$attribute] = $input[$attribute];
            }
            else
            {
                $attributes[$attribute] =  null;
            }
        }

        $total = $query->get()->count();

        if(isset($input['filter']))
        {
            $filters = json_decode($input['filter']);

            if(count($filters))
            {
                foreach ($filters as $key => $filter) {
                    switch ($filter->operator) {
                        case 'like':
                            $query->where($filter->field, $filter->operator, '%'.$filter->value.'%');
                        break;

                        case 'between':
                            $query->whereBetween($filter->field, [$filter->value[0], $filter->value[1]]);
                        break;

                        case 'notbetween':
                            $query->whereNotBetween($filter->field, [$filter->value[0], $filter->value[1]]);
                        break;

                        case 'in':
                            $query->whereIn($filter->field, $filter->value);
                        break;

                        case 'notin':
                            $query->whereNotIn($filter->field, $filter->value);
                        break;
                        
                        default:
                            $query->where($filter->field, $filter->operator, $filter->value);
                        break;
                    }
                }
            }
        }

        if(isset($input['offset']) && $input['offset'] > 0)
        {
            $query->skip($input['offset']);
        }

        if(isset($input['limit']) && $input['limit'] > 0)
        {
            $query->take($input['limit']);
        }

        return [$query->get(), $attributes, 'total'=>$total];
    }

    public function lastUpdated()
    {
        $query = $MODEL_NAME$::orderBy('updated_at','DESC')->first();

        if($query)
        {
            return $query->updated_at->format('Y-m-d H:i:s');
        }

        return date("Y-m-d H:i:s");
    }
}
